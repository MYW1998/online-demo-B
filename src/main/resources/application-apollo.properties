server.port=8082

# AppId是应用的身份信息，是从服务端获取配置的一个重要信息
app.id=${APP-ID:adp2}
# pollo支持配置按照集群划分，对不同的集群可以有不同的配置
apollo.cluster=default
# Apollo支持应用在不同的环境有不同的配置，所以需要在运行提供给Apollo客户端当前环境的Apollo Meta Server信息。默认情况下，meta server和config service是部署在同一个JVM进程，所以meta server的地址就是config service的地址。
apollo.meta=10.22.4.79:8080
#apollo.configServer=10.22.4.79:8080
#占位符开关： Spring应用通常会使用Placeholder来注入配置，使用的格式形如${someKey:someDefaultValue}，如${timeout:100}。冒号前面的是key，冒号后面的是默认值。
apollo.autoUpdateInjectedSpringProperties=true
# 支持通过application.properties/bootstrap.properties来配置
apollo.bootstrap.enabled=true
# 注入多个namespace的配置示例或者非默认application namespace
apollo.bootstrap.namespaces=TEST1.traffic-mesh.properties,TEST1.gcm.yaml,application.properties
#从1.2.0版本开始，如果希望把日志相关的配置（如logging.level.root=info或logback-spring.xml中的参数）也放在Apollo管理，那么可以额外配置apollo.bootstrap.eagerLoad.enabled=true来使Apollo的加载顺序放到日志系统加载之前，不过这会导致Apollo的启动过程无法通过日志的方式输出(因为执行Apollo加载的时候，日志系统压根没有准备好呢！所以在Apollo代码中使用Slf4j的日志输出便没有任何内容)
apollo.bootstrap.eagerLoad.enabled=true